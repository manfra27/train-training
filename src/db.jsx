// last id = 281

export const db = [
    {
        topicName: "Command Line Utilities",
        entries: [
            { "term": "mvn:", "explanation": "To manage Java projects with Maven.", "question": "Which tool is commonly used to manage and build Java projects?" },
            { "term": "npm:", "explanation": "To manage JavaScript packages and dependencies.", "question": "What is the default package manager for Node.js?" },
            { "term": "gradle:", "explanation": "To build and manage software projects, often Java-based.", "question": "Which build tool is known for its flexibility and often used for Java projects?" },
            { "term": "pip:", "explanation": "To manage Python packages and libraries.", "question": "What tool is used to install and manage Python packages?" },
            { "term": "composer:", "explanation": "To manage PHP project dependencies.", "question": "Which tool is used to manage dependencies in PHP projects?" },
            { "term": "gem:", "explanation": "To manage Ruby packages (gems).", "question": "What is the name of the tool for managing Ruby libraries?" },
            { "term": "yarn:", "explanation": "To manage JavaScript dependencies, similar to npm.", "question": "What is an alternative package manager to npm for JavaScript?" },
            { "term": "cargo:", "explanation": "To manage Rust packages and projects.", "question": "Which tool is used to manage Rust projects and dependencies?" },
            { "term": "go:", "explanation": "To manage Go modules and dependencies.", "question": "What tool is used to manage Go modules and packages?" },
            { "term": "brew:", "explanation": "To manage software packages on macOS.", "question": "What is the popular package manager for macOS?" },
            { "term": "docker:", "explanation": "To manage containerized applications.", "question": "Which tool is used to create, deploy, and manage containers?" },
            { "term": "kubectl:", "explanation": "To manage Kubernetes clusters and resources.", "question": "What command-line tool is used to interact with Kubernetes clusters?" },
            { "term": "terraform:", "explanation": "To manage infrastructure as code across clouds.", "question": "Which tool is used for managing infrastructure as code across different cloud platforms?" },
            { "term": "ansible:", "explanation": "To automate IT tasks and manage configurations.", "question": "What tool is commonly used for IT automation and configuration management?" },
            { "term": "vagrant:", "explanation": "To manage virtual development environments.", "question": "Which tool is used to manage virtual environments for development?" },
            { "term": "make:", "explanation": "To automate build processes in software development.", "question": "Which classic tool automates build processes based on Makefiles?" },
            { "term": "npx:", "explanation": "To run Node.js packages without installing them globally.", "question": "Which Node.js tool lets you run packages without global installation?" },
            { "term": "git:", "explanation": "To manage version control for source code.", "question": "What tool is widely used for version control in software development?" },
            { "term": "ssh:", "explanation": "To connect securely to remote systems.", "question": "What protocol is used for securely connecting to remote machines?" },
            { "term": "curl:", "explanation": "To transfer data from or to a server using various protocols.", "question": "Which command-line tool is used to transfer data from or to servers?" },
            { "term": "wget:", "explanation": "To download files from the web (alternative to curl).", "question": "What tool is commonly used to download files from the web?" },
            { "term": "zsh/bash:", "explanation": "Shells for interacting with the operating system.", "question": "What are examples of popular command-line shells?" },
            { "term": "rsync:", "explanation": "To synchronize files between systems.", "question": "Which tool is used to sync files across systems or directories?" },
            { "term": "ffmpeg:", "explanation": "To manipulate and convert multimedia files (audio/video).", "question": "What tool is used to process and convert audio/video files?" },
            { "term": "tmux:", "explanation": "To manage terminal sessions and split panes.", "question": "Which tool helps manage multiple terminal sessions?" },
            { "term": "htop:", "explanation": "To monitor system resource usage interactively.", "question": "What is a popular tool for interactively monitoring system resources?" },
            { "term": "jq:", "explanation": "To parse and manipulate JSON data from the command line.", "question": "Which command-line tool is used to process JSON data?" },
            { "term": "aws/az/gcloud:", "explanation": "CLI tools for managing AWS, Azure, and Google Cloud resources.", "question": "What are examples of CLI tools for managing cloud resources on AWS, Azure, and Google Cloud?" },
            { "term": "python/node/ruby:", "explanation": "Interpreters for running respective programming languages directly.", "question": "Which interpreters are used to run Python, Node.js, or Ruby code?" }
        ],
    },
    {
        topicName: "Algorithm optimisation",
        entries: [
            { "term": "Space complexity", "explanation": "Analyzes how much memory an algorithm uses relative to the input size. Recursive algorithms often have O(n) space complexity due to stack usage.", "question": "What does space complexity analyze in an algorithm?" },
            { "term": "Amortized analysis", "explanation": "Analyzes the average cost of operations over a sequence of operations. Useful for dynamic arrays with O(1) amortized insertion due to occasional resizing.", "question": "What is the purpose of amortized analysis in algorithms?" },
            { "term": "Average case complexity", "explanation": "Analyzes the expected runtime of an algorithm over all possible inputs. Example: QuickSort has O(n log n) average case but O(nÂ²) worst case.", "question": "How does average case complexity differ from worst-case complexity?" },
            { "term": "Energy complexity", "explanation": "Measures the energy consumed by an algorithm when run on hardware. Important for low-power and embedded systems.", "question": "Why is energy complexity significant for certain systems?" },
            { "term": "Cache efficiency", "explanation": "Focuses on how well an algorithm utilizes CPU caches and memory hierarchies. Example: Merge Sort is more cache-efficient than QuickSort due to contiguous memory access.", "question": "How does cache efficiency impact algorithm performance?" },
            { "term": "Parallel complexity", "explanation": "Measures performance improvement when algorithms are parallelized. Example: An O(n) algorithm might become O(log n) with n processors.", "question": "What is parallel complexity, and how can it improve algorithm performance?" },
            { "term": "Communication complexity", "explanation": "Focuses on the cost of communication in distributed algorithms, such as network overhead.", "question": "What does communication complexity measure in distributed systems?" },
            { "term": "I/O complexity", "explanation": "Measures the number of input/output operations between memory and disk. Useful for large-scale data processing like sorting.", "question": "How does I/O complexity affect large-scale data processing?" },
            { "term": "P (Polynomial Time)", "explanation": "Problems solvable in polynomial time. Example: Sorting algorithms like Merge Sort.", "question": "What are P problems in computational complexity theory?" },
            { "term": "NP (Nondeterministic Polynomial Time)", "explanation": "Problems verifiable in polynomial time but not necessarily solvable in polynomial time. Example: Traveling Salesman Problem.", "question": "What distinguishes NP problems from P problems?" },
            { "term": "EXP (Exponential Time)", "explanation": "Problems solvable in exponential time. Example: Solving the n-queens problem via brute force.", "question": "What are EXP problems, and why are they computationally expensive?" },
            { "term": "try-catch", "explanation": "Handles exceptions during runtime. Example:\n```java\ntry {...;} catch (IOException e) {\n    System.err.println(e.getMessage());\n}\n```", "question": "How can try-catch blocks improve failure tolerance in Java?" },
            { "term": "Retry logic", "explanation": "Attempts to execute code multiple times in case of failure. Example:\n```java\nint retries = 3;\nwhile (retries > 0) {\n    try {...; break;} catch (Exception e) {\n        retries--;\n    }\n}\nif (retries == 0) {\n    System.err.println(\"Failed after retries\");\n}\n```", "question": "How can retry logic be implemented for failure tolerance?" },
            { "term": "Fallback", "explanation": "Provides a default value or behavior when an operation fails. Example:\n```java\ntry {...;} catch (Exception e) {\n    return \"default value\";\n}\n```", "question": "What is a fallback mechanism, and how can it be implemented?" }
        ]
    },
    {
        topicName: "Big O",
        entries: [
            { "term": "Big-O application", "explanation": "Big-O notation helps to understand the efficiency of an algorithm by analyzing its time or space complexity as input size grows. It is used to compare different approaches to solve the same problem, enabling developers to select the most optimal one. This ensures scalability and efficient resource utilization in software systems.", "question": "Why is Big-O notation important in algorithm design?" },
            { "term": "O(1) - Constant", "explanation": "Execution time remains constant regardless of the input size. This implies the algorithm executes in the same amount of time for any input size. Constant time is the most efficient complexity class for an operation.\nint method(int[] arr) {\n    return arr[0]; // always one operation\n}", "question": "What is an example of a constant time algorithm?" },
            { "term": "O(log n) - Logarithmic", "explanation": "Execution time grows logarithmically as input size increases. This complexity occurs in divide-and-conquer algorithms, where the problem size reduces by a factor of 2 in each step.\nint binarySearch(int[] arr, int target) {\n    int low = 0, high = arr.length - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) low = mid + 1;\n        else high = mid - 1;\n    }\n    return -1;\n}", "question": "What is an example of a logarithmic time algorithm?" },
            { "term": "O(n) - Linear", "explanation": "Execution time grows linearly with input size. For every additional input, the time increases proportionally. This is common in algorithms that process each element of the input exactly once.\nint findMax(int[] arr) {\n    int max = arr[0];\n    for (int num : arr) {\n        if (num > max) max = num; // Loops n times\n    }\n    return max;\n}", "question": "What is an example of a linear time algorithm?" },
            { "term": "O(n log n) - Linearithmic", "explanation": "Execution time grows proportionally with n times log n. This complexity is common in efficient sorting algorithms like Merge Sort and QuickSort (average case).\nvoid mergeSort(int[] arr) {\n    if (arr.length <= 1) return;\n    // Split, sort, and merge logic\n}", "question": "What is an example of a linearithmic time algorithm?" },
            { "term": "O(nÂ²) - Quadratic", "explanation": "Execution time grows quadratically as the input size increases. This occurs in algorithms with nested loops, where each element is compared or interacted with every other element.\nvoid bubbleSort(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n            }\n        }\n    }\n}", "question": "What is an example of a quadratic time algorithm?" },
            { "term": "O(2â¿) - Exponential", "explanation": "Execution time doubles with each additional input, making it impractical for large input sizes. This complexity often appears in recursive algorithms without proper optimization, such as calculating Fibonacci numbers.\nint fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2); // Recursive calls grow exponentially\n}", "question": "What is an example of an exponential time algorithm?" },
            { "term": "Big-Î© (Omega) - Best Case", "explanation": "Represents the lower bound of an algorithmâs performance. It indicates the best-case runtime, which occurs when the input is most favorable.\n\nExample: Searching in a sorted array, where the best case is O(1) if the element is the first one.", "question": "What does Big-Î© notation represent in algorithm analysis?" },
            { "term": "Big-Î (Theta) - Tight Bound", "explanation": "Represents both the upper and lower bounds of an algorithmâs runtime, meaning the algorithm always takes this time for any input of a given size.\n\nExample: Iterating through an array always takes O(n) time.", "question": "What does Big-Î notation represent, and can you give an example?" },
            { "term": "Little-o", "explanation": "Represents the strict upper bound of an algorithm. It means the algorithmâs runtime grows slower than the given bound. Used in theoretical contexts to indicate non-asymptotic upper limits.\n\nExample: If f(n) = n and g(n) = nÂ², then f(n) = o(g(n)) since n grows slower than nÂ².", "question": "What does Little-o notation represent in algorithm analysis?" },
            { "term": "Little-Ï", "explanation": "Represents the strict lower bound of an algorithm, meaning the algorithm's runtime grows faster than the given bound. It is used in theoretical discussions to indicate runtime growth beyond a specific threshold.\n\nExample: If f(n) = nÂ² and g(n) = n, then f(n) = Ï(g(n)) since nÂ² grows faster than n.", "question": "What does Little-Ï notation represent in algorithm analysis?" }

        ]
    },
    {
        topicName: "Java methods",
        entries: [
            { "term": "get(int index)", "explanation": "Retrieves the element at the specified index.\nInterfaces: List", "question": "How can you retrieve an element at a specific index in a List?" },
            { "term": "set(int index, E element)", "explanation": "Replaces the element at the specified index with a new one.\nInterfaces: List", "question": "Which method replaces an element at a specific index in a List?" },
            { "term": "remove(int index)", "explanation": "Removes the element at the specified index.\nInterfaces: List", "question": "Which method removes an element at a specific index in a List?" },
            { "term": "size()", "explanation": "Returns the number of elements in the list.\nInterfaces: List, Set, Map", "question": "Which method retrieves the size of a List, Set, or Map?" },
            { "term": "put(K key, V value)", "explanation": "Adds or updates the key-value pair in the map.\nInterfaces: Map", "question": "Which method inserts or updates a key-value pair in a Map?" },
            { "term": "get(Object key)", "explanation": "Retrieves the value associated with the specified key.\nInterfaces: Map", "question": "How can you retrieve the value for a key in a Map?" },
            { "term": "remove(Object key)", "explanation": "Removes the key-value pair associated with the specified key.\nInterfaces: Map", "question": "Which method removes a key-value pair from a Map?" },
            { "term": "containsKey(Object key)", "explanation": "Checks if the map contains the specified key.\nInterfaces: Map", "question": "How can you check if a key exists in a Map?" },
            { "term": "keySet()", "explanation": "Returns a set view of the keys in the map.\nInterfaces: Map", "question": "How can you retrieve all keys from a Map?" },
            { "term": "add(E e)", "explanation": "Adds the specified element to the set if it is not already present.\nInterfaces: Set", "question": "Which method adds an element to a Set?" },
            { "term": "remove(Object o)", "explanation": "Removes the specified element from the set if it is present.\nInterfaces: Set", "question": "Which method removes an element from a Set?" },
            { "term": "contains(Object o)", "explanation": "Checks if the set contains the specified element.\nInterfaces: Set", "question": "How can you check if an element exists in a Set?" },
            { "term": "clear()", "explanation": "Removes all elements from the set.\nInterfaces: Set, Map", "question": "How can you clear all elements from a Set or a Map?" },
            { "term": "abs(int a)", "explanation": "Returns the absolute value of the argument.\nInterfaces: Math", "question": "Which method returns the absolute value of a number?" },
            { "term": "max(int a, int b)", "explanation": "Returns the greater of two values.\nInterfaces: Math", "question": "How can you find the maximum of two values?" },
            { "term": "min(int a, int b)", "explanation": "Returns the smaller of two values.\nInterfaces: Math", "question": "Which method returns the smaller of two values?" },
            { "term": "pow(double a, double b)", "explanation": "Returns the value of the first argument raised to the power of the second argument.\nInterfaces: Math", "question": "How can you calculate a number raised to a power?" },
            { "term": "sqrt(double a)", "explanation": "Returns the square root of the argument.\nInterfaces: Math", "question": "Which method calculates the square root of a number?" },
            { "term": "sort(int[] a)", "explanation": "Sorts the specified array into ascending order.\nInterfaces: Arrays", "question": "Which method sorts an array in ascending order?" },
            { "term": "binarySearch(int[] a, int key)", "explanation": "Searches for a key in a sorted array using binary search.\nInterfaces: Arrays", "question": "How can you perform a binary search in an array?" },
            { "term": "equals(int[] a, int[] b)", "explanation": "Checks if two arrays are equal.\nInterfaces: Arrays", "question": "Which method checks if two arrays are equal?" },
            { "term": "fill(int[] a, int val)", "explanation": "Fills the array with the specified value.\nInterfaces: Arrays", "question": "How can you fill an array with a single value?" },
            { "term": "copyOf(int[] original, int newLength)", "explanation": "Returns a copy of the specified array with a new length.\nInterfaces: Arrays", "question": "How can you copy an array to a new length?" },
            { "term": "charAt(int index)", "explanation": "Returns the character at the specified index.\nInterfaces: String", "question": "Which method retrieves the character at a specific index in a String?" },
            { "term": "substring(int beginIndex, int endIndex)", "explanation": "Returns a substring from the specified range.\nInterfaces: String", "question": "How can you extract a substring from a String?" },
            { "term": "equals(Object anObject)", "explanation": "Compares this string to the specified object.\nInterfaces: String", "question": "Which method checks if two strings are equal?" },
            { "term": "length()", "explanation": "Returns the length of the string.\nInterfaces: String", "question": "Which method returns the length of a String?" },
            { "term": "replace(char oldChar, char newChar)", "explanation": "Replaces all occurrences of a specified character with another character.\nInterfaces: String", "question": "How can you replace characters in a String?" },
            { "term": "parseInt(String s)", "explanation": "Parses the string argument as a signed decimal integer.\nInterfaces: Integer", "question": "How can you convert a String to an Integer?" },
            { "term": "valueOf(String s)", "explanation": "Returns an Integer object holding the value of the specified string.\nInterfaces: Integer", "question": "How can you get an Integer object from a String?" },
            { "term": "toString(int i)", "explanation": "Returns a String object representing the specified integer.\nInterfaces: Integer", "question": "Which method converts an int to a String?" },
            { "term": "compareTo(Integer anotherInteger)", "explanation": "Compares two Integer objects numerically.\nInterfaces: Integer", "question": "How can you compare two Integer objects?" },
            { "term": "intValue()", "explanation": "Returns the value of this Integer as an int.\nInterfaces: Integer", "question": "Which method retrieves the primitive int value from an Integer object?" }
        ],
    },
    {
        topicName: "Java collections",
        entries: [
            { "term": "ArrayList", "explanation": "ArrayList implements the List interface. It is best suited for dynamic arrays where random access is required. It resizes dynamically but performs poorly with frequent insertions or deletions in the middle of the list due to shifting elements.", "question": "What is the best use case for ArrayList in Java?" },
            { "term": "LinkedList", "explanation": "LinkedList implements both List and Deque interfaces. It is optimal for scenarios requiring frequent insertions or deletions since these operations are efficient at both ends. However, it performs poorly for random access due to its sequential nature.", "question": "When should you use LinkedList instead of ArrayList in Java?" },
            { "term": "Vector", "explanation": "Vector implements the List interface and is synchronized, making it thread-safe. It is suitable for legacy systems requiring thread-safe dynamic arrays. However, its overhead due to synchronization makes it less efficient than ArrayList in single-threaded environments.", "question": "What are the advantages and disadvantages of using Vector in Java?" },
            { "term": "HashSet", "explanation": "HashSet implements the Set interface and is backed by a HashMap. It is ideal for storing unique elements and offers constant-time performance for add, remove, and contains operations. It does not maintain insertion order.", "question": "What makes HashSet efficient for storing unique elements in Java?" },
            { "term": "LinkedHashSet", "explanation": "LinkedHashSet implements the Set interface and maintains the insertion order of elements. It is optimal for scenarios where both uniqueness and order preservation are required. Performance is slightly slower than HashSet due to the maintenance of a linked list.", "question": "When would you choose LinkedHashSet over HashSet in Java?" },
            { "term": "TreeSet", "explanation": "TreeSet implements the NavigableSet interface and uses a Red-Black Tree for storage. It is ideal for sorted sets and allows elements to be retrieved in natural or custom order. It performs poorly compared to HashSet for basic operations.", "question": "What is the primary use case for TreeSet in Java?" },
            { "term": "HashMap", "explanation": "HashMap implements the Map interface and provides constant-time performance for key-based operations. It is optimal for scenarios requiring fast key-value pair lookups. However, it does not guarantee any specific iteration order.", "question": "What are the primary features of HashMap in Java?" },
            { "term": "TreeMap", "explanation": "TreeMap implements the NavigableMap interface and stores keys in sorted order using a Red-Black Tree. It is best suited for scenarios where sorted order of keys is required, but it is slower than HashMap for key lookups.", "question": "When should you use TreeMap instead of HashMap in Java?" },
            { "term": "LinkedHashMap", "explanation": "LinkedHashMap implements the Map interface and maintains the insertion order of keys. It is ideal for scenarios where order-sensitive key-value pair storage is required. Performance is slightly slower than HashMap.", "question": "Why would you use LinkedHashMap over HashMap in Java?" },
            { "term": "PriorityQueue", "explanation": "PriorityQueue implements the Queue interface and is backed by a heap data structure. It is best for priority-based tasks where elements with the highest or lowest priority need to be processed first. It does not allow null elements.", "question": "What is the main use case for PriorityQueue in Java?" },
            { "term": "Deque", "explanation": "Deque is a double-ended queue interface that allows efficient insertion and removal of elements from both ends. It is optimal for scenarios like stacks and queues requiring two-way access.", "question": "What makes Deque suitable for stack and queue operations in Java?" },
            { "term": "ArrayDeque", "explanation": "ArrayDeque implements the Deque interface and provides a resizable array-based implementation. It is best for stack and queue operations with no capacity restrictions and performs better than LinkedList for similar tasks.", "question": "Why is ArrayDeque preferred over LinkedList for Deque operations in Java?" },
        ],
    },
    {
        topicName: "Java type casting",
        entries: [
            { "term": "implicit casting", "explanation": "Implicit casting automatically converts a smaller type to a larger type (e.g., int â double) without the need for explicit syntax. Example: int intValue = 5; double doubleValue = intValue; // Implicit casting", "question": "What is implicit casting, and how does it work?" },
            { "term": "explicit casting", "explanation": "Explicit casting converts a larger type to a smaller type (e.g., double â int) and requires explicit syntax to avoid precision loss. Example: double doubleValue = 5.7; int intValue = (int) doubleValue; // Explicit casting", "question": "What is explicit casting, and when is it required?" },
            { "term": "upcasting", "explanation": "Upcasting converts a subclass object to its superclass type automatically, ensuring type safety and allowing polymorphism. Example: class Animal {} class Dog extends Animal {} Animal animal = new Dog(); // Upcasting", "question": "What is upcasting, and why is it useful?" },
            { "term": "downcasting", "explanation": "Downcasting converts a superclass reference to a subclass type. It requires explicit casting and type checking to ensure correctness. Example: class Animal {} class Dog extends Animal {} Animal animal = new Dog(); Dog dog = (Dog) animal; // Downcasting", "question": "What is downcasting, and how is it performed?" },
            { "term": "autoboxing", "explanation": "Autoboxing automatically converts a primitive type to its corresponding wrapper object. Example: int primitive = 10; Integer wrapper = primitive; // Autoboxing", "question": "What is autoboxing in Java, and how does it occur?" },
            { "term": "unboxing", "explanation": "Unboxing automatically converts a wrapper object to its corresponding primitive type. Example: Integer wrapper = 10; int primitive = wrapper; // Unboxing", "question": "What is unboxing in Java, and when does it happen?" }
        ]
    },
    {
        topicName: "Java imports",
        entries: [
            {
                "term": "import java.util.*;",
                "explanation": "Use java.util.* for small projects due to simplicity; use java.util.'specific' for larger projects to prevent namespace conflicts and enhance readability.",
                "question": "When should you use 'import java.util.*' versus a specific import in Java?"
            },
            {
                "term": "import java.util.logging.Logger;",
                "explanation": "Allows logging of exceptions and messages for debugging and monitoring.",
                "question": "Which import is used for logging exceptions in Java?"
            },
            {
                "term": "import java.io.IOException;",
                "explanation": "Handles input/output exceptions during file or stream operations.",
                "question": "Which import is required to handle I/O errors in Java?"
            },
            {
                "term": "import java.util.Arrays;",
                "explanation": "Provides utility methods for manipulating arrays, such as sorting and searching.",
                "question": "Which import provides utility methods for handling arrays in Java?"
            },
            {
                "term": "import java.util.ArrayList;",
                "explanation": "Enables the use of dynamic arrays that grow as needed.",
                "question": "Which import allows the use of dynamic arrays in Java?"
            },
            {
                "term": "import java.util.Random;",
                "explanation": "Generates random numbers for various applications.",
                "question": "Which import is used for generating random numbers in Java?"
            },
            {
                "term": "import java.util.HashMap;",
                "explanation": "Provides a data structure to store key-value pairs with fast lookup.",
                "question": "Which import is used for storing key-value pairs in Java?"
            },
            {
                "term": "import java.util.HashSet;",
                "explanation": "Provides a collection for unique elements, with fast operations.",
                "question": "Which import is used for storing unique elements in Java?"
            },
            {
                "term": "import java.util.Collections;",
                "explanation": "Provides utility methods for manipulating collections, such as sorting or searching.",
                "question": "Which import offers utility methods for manipulating collections in Java?"
            },
            {
                "term": "import java.io.File;",
                "explanation": "Enables file operations like creating, deleting, and reading file metadata.",
                "question": "Which import allows file operations in Java?"
            },
            {
                "term": "import java.io.*;",
                "explanation": "Provides classes for file reading and writing operations.",
                "question": "Which import allows reading from and writing to files in Java?"
            },
            {
                "term": "import java.util.Scanner;",
                "explanation": "Facilitates reading input from various sources, such as user input.",
                "question": "Which import is used for reading user input in Java?"
            },
            {
                "term": "import java.time.*;",
                "explanation": "Provides classes for working with date and time.",
                "question": "Which import offers classes for handling date and time in Java?"
            },
            {
                "term": "import java.util.concurrent.*;",
                "explanation": "Facilitates concurrent programming, including multithreading and synchronization.",
                "question": "Which import is used for concurrency utilities in Java?"
            },
            {
                "term": "import java.util.stream.*;",
                "explanation": "Provides a modern approach to process collections using streams and functional programming.",
                "question": "Which import is used for processing collections with streams in Java?"
            }
        ]
    },
    {
        topicName: "Angular 2",
        entries: [
            { "term": "Component", "explanation": "The building block of an Angular application. It controls a view and defines its behavior and template.", "question": "What is the fundamental building block of an Angular application that controls a view?" },
            { "term": "Module", "explanation": "A container for a cohesive block of code, including components, directives, pipes, and services. The root module is AppModule.", "question": "What is the Angular feature that organizes related code into cohesive blocks?" },
            { "term": "Template", "explanation": "The HTML associated with a component. It defines what the user sees in the browser.", "question": "What defines the user interface in an Angular component?" },
            { "term": "Directive", "explanation": "A class that can manipulate the DOM. Types include structural (e.g., *ngIf) and attribute (e.g., ngClass).", "question": "Which Angular feature is used to manipulate the DOM, including structural and attribute types?" },
            { "term": "Interpolation", "explanation": "Binds a property from the component to the template using {{propertyName}}.", "question": "How can you bind a component property to a template in Angular?" },
            { "term": "Property Binding", "explanation": "Binds a property from the component to an element in the DOM using [property].", "question": "Which data binding technique binds a component property to a DOM element?" },
            { "term": "Event Binding", "explanation": "Allows the template to listen for events from the DOM using (event).", "question": "How do you enable the template to listen for DOM events in Angular?" },
            { "term": "Two-Way Binding", "explanation": "Combines property and event binding using [()], typically with ngModel.", "question": "Which data binding technique in Angular combines property and event binding?" },
            { "term": "Service", "explanation": "A class with logic that can be shared across components. Services are registered and provided via dependency injection.", "question": "What is the shared class in Angular that provides logic across components?" },
            { "term": "Injector", "explanation": "The mechanism Angular uses to provide an instance of a service to components and other services.", "question": "What mechanism does Angular use to provide services to components and other services?" },
            { "term": "Provider", "explanation": "Configures how a service is created and injected into Angular components.", "question": "Which Angular feature configures the creation and injection of services?" },
            { "term": "@Input", "explanation": "A decorator to pass data from a parent to a child component.", "question": "What Angular decorator is used to pass data from a parent to a child component?" },
            { "term": "@Output", "explanation": "A decorator to emit events from a child component to a parent using EventEmitter.", "question": "Which decorator in Angular is used for child-to-parent communication via events?" },
            { "term": "ngOnInit", "explanation": "Lifecycle hook invoked once the component is initialized.", "question": "Which lifecycle hook is called after Angular initializes a component?" },
            { "term": "ngOnChanges", "explanation": "Lifecycle hook called whenever an input property changes.", "question": "What lifecycle hook in Angular responds to changes in input properties?" },
            { "term": "ngOnDestroy", "explanation": "Lifecycle hook invoked just before the component is destroyed.", "question": "Which lifecycle hook is used to clean up before a component is destroyed?" },
            { "term": "RouterModule", "explanation": "Angularâs routing library for defining and managing application routes.", "question": "What Angular library is used to define and manage application routes?" },
            { "term": "RouterOutlet", "explanation": "A placeholder in the template for the router to render a component.", "question": "What feature in Angular serves as a placeholder for routed components?" },
            { "term": "ActivatedRoute", "explanation": "Provides information about the current route, including route parameters.", "question": "Which Angular feature provides details about the current route and its parameters?" },
            { "term": "Template-Driven Forms", "explanation": "Forms where the logic is defined in the template with directives like ngModel.", "question": "Which type of Angular form relies on template directives for logic?" },
            { "term": "Reactive Forms", "explanation": "Forms defined in the component class using FormControl and FormGroup.", "question": "What type of Angular form is defined using FormControl and FormGroup in the component?" },
            { "term": "Validators", "explanation": "Functions that perform validation logic, such as Validators.required.", "question": "Which Angular feature is used to perform validation logic on forms?" },
            { "term": "Observable", "explanation": "A stream of asynchronous data that can be subscribed to.", "question": "What is the Angular feature that provides a stream of asynchronous data?" },
            { "term": "Subject", "explanation": "A special type of Observable that acts as both an observer and an observable.", "question": "Which type of Observable in Angular can act as both an observer and an observable?" },
            { "term": "Pipe", "explanation": "Transforms data in the template, such as uppercase or date.", "question": "What Angular feature is used to transform data in a template?" },
            { "term": "Custom Pipe", "explanation": "A user-defined transformation applied in the template.", "question": "Which type of Angular pipe is created by the user to define custom transformations?" },
            { "term": "Folder Structure", "explanation": "Organize files by feature modules or components for scalability.", "question": "What is the recommended practice for organizing files in an Angular project?" },
            { "term": "Lazy Loading", "explanation": "Load feature modules only when needed to improve performance.", "question": "Which Angular practice improves performance by loading feature modules on demand?" }
        ]
    },
    {
        topicName: "Git commands",
        entries: [
            { "term": "git log -p <file>", "explanation": "Displays the commit history of a specific file along with the changes introduced in each commit.", "question": "How can you view the commit history of a specific file, including changes made?" },
            { "term": "git reset --hard <commit-hash>", "explanation": "Resets the repository to a specific commit, discarding all changes made after that commit.", "question": "Which command resets the repository to a specific commit, discarding changes?" },
            { "term": "git revert <commit-hash>", "explanation": "Creates a new commit that undoes the changes introduced by a specified commit, preserving history.", "question": "How do you create a new commit that undoes a specific commit?" },
            { "term": "git pull", "explanation": "Combines `git fetch` and `git merge` to download and merge changes from the remote repository.", "question": "How can you download and merge changes from the remote repository?" },
            { "term": "git push origin <branch-name>", "explanation": "Uploads local commits to the specified branch in the remote repository.", "question": "How do you upload local changes to a specific branch on the remote repository?" },
            { "term": "git branch -d <branch-name>", "explanation": "Deletes a branch locally, provided it has been fully merged.", "question": "What command is used to delete a branch locally?" },
            { "term": "git merge <branch-name>", "explanation": "Merges the specified branch into the current branch, combining their histories.", "question": "Which command is used to merge another branch into the current branch?" },
            { "term": "git checkout -b <branch-name>", "explanation": "Creates a new branch and switches to it in one command.", "question": "What command allows you to create and switch to a new branch?" },
            { "term": "git checkout <branch-name>", "explanation": "Switches the working directory to the specified branch.", "question": "How can you switch to a different branch in your repository?" },
            { "term": "git branch <branch-name>", "explanation": "Creates a new branch without switching to it.", "question": "Which command creates a new branch in your repository?" },
            { "term": "git commit -m 'commit message'", "explanation": "Saves staged changes with a descriptive commit message.", "question": "How can you save staged changes with a descriptive message?" },
            { "term": "git add <file>", "explanation": "Stages a specific file for the next commit.", "question": "Which command stages a specific file for the next commit?" },
            { "term": "git add .", "explanation": "Stages all changes in the working directory for the next commit.", "question": "How do you stage all changes in the working directory for the next commit?" },
            { "term": "git status", "explanation": "Shows the current status of the repository, including staged, unstaged, and untracked files.", "question": "What command shows the current status of your repository, including staged and unstaged changes?" },
            { "term": "git clone <repository-url>", "explanation": "Creates a local copy of a remote repository, including its commit history.", "question": "How can you create a local copy of a remote repository?" },
            { "term": "git init", "explanation": "Initializes a new Git repository in the current directory.", "question": "Which command initializes a new Git repository?" },
            { "term": "git restore <file>", "explanation": "Discards changes in the working directory.", "question": "What command discards changes in the working directory?" },
            { "term": "git rebase", "explanation": "Moves or combines commits into a new base. Use `git rebase -i` for interactive rebasing.", "question": "What command allows you to move or combine commits in Git?" },
            { "term": "ssh-keygen -t rsa", "explanation": "Generates a new SSH key for Git authentication.", "question": "How do you generate an SSH key for secure Git communication?" },
            { "term": "ssh-add <path-to-key>", "explanation": "Adds an SSH key to the SSH agent.", "question": "What command adds an SSH key to the SSH agent?" },
            { "term": "git branch -D <branch>", "explanation": "Forces the deletion of a branch, even if it has unmerged changes.", "question": "Which command forcefully deletes a branch in Git?" },
            { "term": "git branch -m <branch>", "explanation": "Renames the current branch to the specified name.", "question": "How do you rename the current Git branch?" },
            { "term": "git branch -a", "explanation": "Lists all branches, including remote branches.", "question": "Which command lists all local and remote Git branches?" },
            { "term": "git pull --no-rebase origin main", "explanation": "Pulls changes from the 'main' branch without rebasing.", "question": "How do you pull changes without rebasing from a Git repository?" },
            { "term": "git pull --rebase origin main", "explanation": "Pulls changes from the 'main' branch and rebases the local commits on top of the remote branch.", "question": "How do you pull changes with rebasing from a Git repository?" },
            { "term": "git pull --ff-only origin main", "explanation": "Pulls changes from the 'main' branch using only fast-forward merges.", "question": "How do you ensure only fast-forward merges when pulling changes in Git?" },
            { "term": "git config pull.rebase false", "explanation": "Configures the current repository to not rebase on pull by default.", "question": "Which command configures Git to disable rebasing on pull for the current repository?" },
            { "term": "git config --global pull.rebase false", "explanation": "Globally configures Git to not rebase on pull by default.", "question": "How do you globally configure Git to disable rebasing on pull?" },
            { "term": "git config pull.rebase true", "explanation": "Configures the current repository to rebase on pull by default.", "question": "Which command configures Git to enable rebasing on pull for the current repository?" },
            { "term": "git config --global pull.rebase true", "explanation": "Globally configures Git to rebase on pull by default.", "question": "How do you globally configure Git to enable rebasing on pull?" },
            { "term": "git config pull.ff only", "explanation": "Configures the current repository to allow only fast-forward merges on pull.", "question": "Which command configures Git to allow only fast-forward merges for the current repository?" },
            { "term": "git config --global pull.ff only", "explanation": "Globally configures Git to allow only fast-forward merges on pull.", "question": "How do you globally configure Git to allow only fast-forward merges?" },
            { "term": "git config", "explanation": "Configures user-specific settings like username and email in Git.", "question": "Which command configures user-specific settings in Git?" },
            { "term": "git clone", "explanation": "Creates a local copy of an existing remote repository.", "question": "Which command is used to clone a remote Git repository?" },
            { "term": "git add", "explanation": "Stages changes for the next commit.", "question": "Which command stages changes for the next commit in Git?" },
            { "term": "git commit", "explanation": "Records staged changes into the repository.", "question": "Which command is used to save staged changes in Git?" },
            { "term": "git branch", "explanation": "Lists, creates, or deletes branches in Git.", "question": "Which command is used to manage branches in Git?" },
            { "term": "git switch", "explanation": "Switches to a different branch in the repository.", "question": "Which command is used to switch between branches in Git?" },
            { "term": "git merge", "explanation": "Combines changes from one branch into another.", "question": "Which command merges one branch into the current branch in Git?" },
            { "term": "git push", "explanation": "Uploads local commits to a remote repository.", "question": "Which command pushes local changes to a remote Git repository?" },
            { "term": "git log", "explanation": "Displays the commit history for the repository.", "question": "Which command displays the commit history in Git?" },
            { "term": "git diff", "explanation": "Shows differences between files in different states.", "question": "Which command shows changes between files in Git?" },
            { "term": "git fetch", "explanation": "Downloads changes from a remote repository without merging them.", "question": "Which command fetches changes from a remote repository in Git?" },
            { "term": "git stash", "explanation": "Temporarily saves changes for later use.", "question": "Which command temporarily saves uncommitted changes in Git?" },
            { "term": "git restore", "explanation": "Restores changes to files in the working directory.", "question": "Which command restores file changes in Git?" },
            { "term": "git reset", "explanation": "Resets the current HEAD to a specified state.", "question": "Which command is used to reset the current branch in Git?" },
            { "term": "git rm", "explanation": "Removes files from the working directory and staging area.", "question": "Which command removes files from Git tracking?" },
            { "term": "git tag", "explanation": "Creates, lists, or deletes tags in the repository.", "question": "Which command manages tags in Git?" },
            { "term": "git show", "explanation": "Displays detailed information about an object in the repository.", "question": "Which command displays detailed information about commits or objects in Git?" },
            { "term": "git blame", "explanation": "Shows which commit last modified each line of a file.", "question": "Which command shows who last modified each line in a file in Git?" },
            { "term": "git revert", "explanation": "Creates a new commit that undoes the changes of a previous commit.", "question": "Which command undoes changes from a specific commit without removing it?" },
            { "term": "git commit --amend", "explanation": "Amends the most recent commit with new changes or a new message.", "question": "Which command amends the last commit in Git?" },
            { "term": "git log --oneline", "explanation": "Displays the commit history in a compact format.", "question": "Which command shows Git logs in a single-line format?" },
            { "term": "git log --graph", "explanation": "Displays the commit history as a graph of branches.", "question": "Which command shows a graphical representation of the commit history in Git?" },
            { "term": "git diff --staged", "explanation": "Shows changes between the staging area and the last commit.", "question": "Which command shows staged changes compared to the last commit in Git?" },
            { "term": "git merge --abort", "explanation": "Aborts a merge in progress and resets the state.", "question": "Which command aborts a merge in Git?" },
            { "term": "git stash apply", "explanation": "Reapplies stashed changes without removing them from the stash.", "question": "Which command reapplies stashed changes in Git?" },
            { "term": "git stash drop", "explanation": "Removes a stash from the stack.", "question": "Which command deletes a stash in Git?" },
            { "term": "git remote add", "explanation": "Adds a new remote repository.", "question": "Which command adds a remote repository in Git?" },
            { "term": "git remote remove", "explanation": "Removes an existing remote repository.", "question": "Which command removes a remote repository in Git?" },
            { "term": "git push --tags", "explanation": "Pushes all tags to a remote repository.", "question": "Which command pushes tags to a remote repository in Git?" }
        ],
    },
    {
        topicName: "Git flags",
        entries: [
            { "term": "--help", "explanation": "Displays help information for a specific Git command.", "question": "Which Git flag shows help information for a command?" },
            { "term": "--global", "explanation": "Applies a configuration change globally across all repositories for the user.", "question": "Which Git flag applies a configuration setting globally?" },
            { "term": "--all", "explanation": "Applies an operation to all branches, tags, or relevant items.", "question": "Which Git flag applies an operation to all branches or items?" },
            { "term": "--force", "explanation": "Forces the operation to be executed, bypassing warnings or checks.", "question": "Which Git flag forces an operation to execute despite warnings?" },
            { "term": "--quiet", "explanation": "Suppresses output messages from Git commands.", "question": "Which Git flag reduces or suppresses command output?" },
            { "term": "--verbose", "explanation": "Displays detailed output from Git commands.", "question": "Which Git flag provides more detailed output for commands?" },
            { "term": "--rebase", "explanation": "Specifies that the operation should use rebase instead of merge.", "question": "Which Git flag enables rebase instead of merge for operations?" },
            { "term": "--amend", "explanation": "Amends the most recent commit with new changes or a new message.", "question": "Which Git flag modifies the most recent commit in Git?" },
            { "term": "--staged", "explanation": "Limits the operation to changes in the staging area only.", "question": "Which Git flag applies changes only to the staging area?" },
            { "term": "--no-ff", "explanation": "Prevents fast-forward merges, creating a merge commit instead.", "question": "Which Git flag disables fast-forward merges?" },
            { "term": "--ff-only", "explanation": "Allows only fast-forward merges for the operation.", "question": "Which Git flag restricts merges to fast-forward only?" },
            { "term": "--hard", "explanation": "Resets the repository to a specified state and discards all changes.", "question": "Which Git flag discards all changes during a reset?" },
            { "term": "--soft", "explanation": "Resets the repository to a specified state but keeps changes staged.", "question": "Which Git flag keeps changes staged during a reset?" },
            { "term": "--mixed", "explanation": "Resets the repository to a specified state but keeps changes in the working directory.", "question": "Which Git flag keeps changes in the working directory during a reset?" },
            { "term": "--track", "explanation": "Sets up tracking for a new branch to track a remote branch.", "question": "Which Git flag sets up tracking for a new branch?" },
            { "term": "--prune", "explanation": "Removes stale remote-tracking branches during fetch or pull.", "question": "Which Git flag cleans up stale branches during fetch or pull?" },
            { "term": "--detach", "explanation": "Switches the repository to a detached HEAD state.", "question": "Which Git flag enables a detached HEAD state?" },
            { "term": "--no-edit", "explanation": "Skips editing the commit message during operations like rebase or merge.", "question": "Which Git flag skips editing the commit message?" },
            { "term": "--dry-run", "explanation": "Simulates the operation without making any changes.", "question": "Which Git flag simulates an operation without executing it?" },
            { "term": "--keep", "explanation": "Preserves uncommitted changes during a reset.", "question": "Which Git flag preserves uncommitted changes during a reset?" },
            { "term": "--no-verify", "explanation": "Skips pre-commit and other hooks during Git operations.", "question": "Which Git flag bypasses pre-commit hooks?" },
            { "term": "--checkout", "explanation": "Applies a stash and checks out files simultaneously.", "question": "Which Git flag applies a stash and checks out files?" },
            { "term": "--sparse", "explanation": "Performs operations on a sparse checkout.", "question": "Which Git flag works with sparse checkouts?" },
            { "term": "--progress", "explanation": "Forces the display of progress information for operations.", "question": "Which Git flag displays progress information during operations?" },
            { "term": "--recurse-submodules", "explanation": "Includes submodule operations during the main command.", "question": "Which Git flag includes submodules in Git operations?" },
            { "term": "--initial", "explanation": "Specifies that the operation is for the initial branch creation.", "question": "Which Git flag specifies the initial branch creation?" },
            { "term": "--single-branch", "explanation": "Clones only the specified branch and no others.", "question": "Which Git flag restricts cloning to a single branch?" },
            { "term": "--depth", "explanation": "Limits the depth of commit history for cloning or fetching.", "question": "Which Git flag limits the depth of commit history?" },
            { "term": "--untracked-files", "explanation": "Specifies how to handle untracked files during operations like status or stash.", "question": "Which Git flag controls the handling of untracked files?" },
            { "term": "--signoff", "explanation": "Adds a 'Signed-off-by' line at the end of the commit message.", "question": "Which Git flag appends a 'Signed-off-by' line to commit messages?" },
            { "term": "--squash", "explanation": "Combines multiple commits into a single commit during merges.", "question": "Which Git flag combines commits during a merge?" },
            { "term": "--list", "explanation": "Lists configurations or items related to the command.", "question": "Which Git flag lists configurations or relevant items?" },
            { "term": "--edit", "explanation": "Opens an editor for modifying messages during commands like rebase or commit.", "question": "Which Git flag opens an editor for message modifications?" },
            { "term": "--force-with-lease", "explanation": "Forces an operation but ensures it doesnât overwrite unexpected changes.", "question": "Which Git flag ensures safe overwriting during forced operations?" },
            { "term": "--assume-unchanged", "explanation": "Marks a file as unchanged to ignore future changes.", "question": "Which Git flag ignores changes to a specific file?" },
            { "term": "--no-assume-unchanged", "explanation": "Reverts the effect of '--assume-unchanged'.", "question": "Which Git flag reverts ignoring changes to a file?" },
            { "term": "--work-tree", "explanation": "Specifies the working tree directory for a repository.", "question": "Which Git flag sets the working tree directory for commands?" }
        ]
    },
    {
        topicName: "Git usecases",
        entries: [
            { "term": "Switching Between Multiple Repositories", "explanation": "1. cd <repository-folder> (Navigate to the desired repository)\n2. git status (Check the current state of the repository)\n3. Repeat commands as needed for the active repository.", "question": "How do you switch between multiple Git repositories?" },
            { "term": "Cleaning Up Untracked Files", "explanation": "1. git clean -n (Preview the files that would be deleted)\n2. git clean -f (Remove untracked files).", "question": "How do you clean up untracked files in a Git repository?" },
            { "term": "Cherry-Picking a Commit", "explanation": "1. git log (Find the commit hash to cherry-pick)\n2. git cherry-pick <commit-hash> (Apply the commit to the current branch).", "question": "What steps are needed to cherry-pick a commit in Git?" },
            { "term": "Renaming a Branch", "explanation": "1. git branch -m <new-branch-name> (Rename the current branch locally)\n2. git push origin:<old-branch-name> <new-branch-name> (Update the branch on remote)\n3. git push origin -u <new-branch-name> (Set the tracking branch).", "question": "How do you rename a branch locally and on a remote repository?" },
            { "term": "Tagging a New Release", "explanation": "1. git tag -a v1.0 -m \"Release version 1.0\" (Create an annotated tag)\n2. git push origin v1.0 (Push the tag to the remote).", "question": "How do you tag a new release in Git and push it to the remote repository?" },
            { "term": "Force Updating Local Branch to Remote", "explanation": "1. git fetch origin (Update local references)\n2. git reset --hard origin/<branch-name> (Reset the local branch to match remote).", "question": "What is the process for force updating a local branch to match a remote branch?" },
            { "term": "Patching Changes", "explanation": "1. git diff > patch.diff (Create a patch file of differences)\n2. git apply patch.diff (Apply the patch to another branch or repository).", "question": "How do you create and apply a patch in Git?" },
            { "term": "Recovering Deleted Files", "explanation": "1. git log -- <file-path> (Find the last commit containing the file)\n2. git checkout <commit-hash> -- <file-path> (Recover the deleted file).", "question": "How can you recover deleted files in Git?" },
            { "term": "Reviewing a Specific Fileâs History", "explanation": "1. git log -- <file-path> (View commit history for the file)\n2. git blame <file-path> (See who last modified each line).", "question": "What commands allow you to review the history of a specific file in Git?" },
            { "term": "Setting Up a New Remote Repository", "explanation": "1. git init (Initialize a Git repository)\n2. git remote add origin <repository-url> (Add the remote repository)\n3. git add . (Stage initial files)\n4. git commit -m \"Initial commit\" (Commit the initial changes)\n5. git push -u origin main (Push to the main branch and set tracking).", "question": "How do you set up a new remote Git repository?" },
            { "term": "Resetting to a Specific Commit", "explanation": "1. git log (Find the commit hash to reset to)\n2. git reset --hard <commit-hash> (Reset the working directory to the specific commit)\n3. git push origin main --force (Push the reset branch to remote).", "question": "What steps are required to reset a branch to a specific commit?" },
            { "term": "Deleting Remote Branches", "explanation": "1. git branch -d <branch-name> (Delete the local branch if needed)\n2. git push origin --delete <branch-name> (Delete the branch on remote).", "question": "How can you delete remote branches in Git?" },
            { "term": "Temporary Work Before Switching Branches", "explanation": "1. git stash (Save current changes without committing)\n2. git checkout <branch-name> (Switch to the target branch)\n3. git stash apply (Reapply stashed changes)\n4. git stash drop (Delete the stash).", "question": "What is the process for stashing changes before switching branches in Git?" },
            { "term": "Squashing Commits Before Pushing", "explanation": "1. git log (Identify the number of commits to squash)\n2. git rebase -i HEAD~<number-of-commits> (Open interactive rebase)\n3. Mark commits as squash or s in the editor, save, and close.\n4. git push origin <branch-name> --force (Push the squashed commits).", "question": "How do you squash commits before pushing in Git?" },
            { "term": "Reverting a Pushed Commit", "explanation": "1. git log (Identify the commit hash to revert)\n2. git revert <commit-hash> (Create a new commit to undo the changes)\n3. git push origin main (Push the revert commit).", "question": "What steps are required to revert a pushed commit in Git?" },
            { "term": "Cleaning Up Unused Local Branches", "explanation": "1. git branch --merged (List merged branches)\n2. git branch -d <branch-name> (Delete a local branch)\n3. git fetch --prune (Remove deleted remote branches from local references).", "question": "How do you clean up unused local branches in Git?" },
            { "term": "Pull Request Workflow", "explanation": "1. git checkout -b feature/<feature-name> (Create a new branch)\n2. git add . (Stage changes)\n3. git commit -m \"Your commit message\" (Commit changes)\n4. git push origin feature/<feature-name> (Push branch to remote)\n5. Open a pull request in the repository.", "question": "What is the Git workflow for creating and submitting a pull request?" },
            { "term": "Rebasing a Feature Branch", "explanation": "1. git checkout feature/<feature-name> (Switch to the feature branch)\n2. git fetch origin (Update local references)\n3. git rebase origin/main (Reapply your branch commits on top of main)\n4. Resolve any conflicts and use git rebase --continue.\n5. git push origin feature/<feature-name> --force (Push the rebased branch).", "question": "How do you rebase a feature branch in Git?" },
            { "term": "Undoing Unstaged Changes", "explanation": "1. git restore <file> (Discard changes in a specific file)\n2. git restore . (Discard all unstaged changes).", "question": "What commands are used to undo unstaged changes in Git?" },
            { "term": "Debugging a Bug (Bisecting)", "explanation": "1. git bisect start (Start the bisect process)\n2. git bisect bad (Mark the current commit as bad)\n3. git bisect good <commit-hash> (Mark a known good commit)\n4. Follow Gitâs guidance to check out commits until the bug is identified.\n5. git bisect reset (End the bisect process).", "question": "What is the Git bisect process for debugging a bug?" },
            { "term": "Rolling Back a Commit", "explanation": "1. git log (Get commit hash to revert)\n2. git revert <commit-hash> (Create a new commit that undoes changes from the specified commit)\n3. git push origin main (Push the revert commit).", "question": "How do you roll back a commit in Git?" },
            { "term": "Deploying Code", "explanation": "1. git add . (Stage all changes)\n2. git commit -m \"Your commit message\" (Commit changes)\n3. git push origin main (Push changes to the main branch).", "question": "What steps are required to deploy code using Git?" },
            { "term": "Resolving Merge Conflicts", "explanation": "1. git pull origin <branch-name> (Pull latest changes from remote)\n2. Resolve conflicts manually in files.\n3. git add <file> (Stage resolved files)\n4. git commit -m \"Resolve merge conflicts\" (Commit resolved conflicts)\n5. git push origin <branch-name> (Push the updated branch).", "question": "How do you resolve merge conflicts in Git?" },
            { "term": "Feature Development in a New Branch", "explanation": "1. git checkout -b feature/<feature-name> (Create and switch to a new branch)\n2. Work on the feature and make changes.\n3. git add . (Stage changes)\n4. git commit -m \"Implement feature <feature-name>\" (Commit changes)\n5. git push origin feature/<feature-name> (Push branch to remote).", "question": "What is the Git process for feature development in a new branch?" },
            { "term": "Syncing a Forked Repository", "explanation": "1. git remote add upstream <original-repo-url> (Add upstream remote)\n2. git fetch upstream (Fetch updates from the original repository)\n3. git merge upstream/main (Merge updates into your fork)\n4. git push origin main (Push updated code to your fork).", "question": "How do you sync a forked repository with the original repository in Git?" },
        ],
    },
    {
        topicName: "MacOS keys",
        entries: [
            { "term": "Command-A", "explanation": "Select all.", "question": "Which shortcut selects all items in the current window?" },
            { "term": "Command-C", "explanation": "Copy.", "question": "What is the shortcut for copying selected items?" },
            { "term": "Command-D", "explanation": "Duplicate selected item or Bookmark page in Safari.", "question": "What does Command-D do in macOS?" },
            { "term": "Command-E", "explanation": "Eject.", "question": "Which shortcut ejects a selected disk or volume?" },
            { "term": "Command-Z", "explanation": "Undo.", "question": "What is the shortcut for undoing the last action?" },
            { "term": "Command-F", "explanation": "Find in Finder.", "question": "How do you search in Finder using a shortcut?" },
            { "term": "Command-H", "explanation": "Hide.", "question": "Which shortcut hides the current app's windows?" },
            { "term": "Command-I", "explanation": "Show Info.", "question": "What does Command-I do in macOS?" },
            { "term": "Command-J", "explanation": "View Options.", "question": "What shortcut opens the View Options dialog?" },
            { "term": "Command-K", "explanation": "Connect to Server.", "question": "Which shortcut connects to a server in Finder?" },
            { "term": "Command-L", "explanation": "Create an alias.", "question": "How can you create an alias in macOS?" },
            { "term": "Command-M", "explanation": "Minimize Window.", "question": "What shortcut minimizes the current window?" },
            { "term": "Command-N", "explanation": "Open a new Finder Window or New Document.", "question": "Which shortcut opens a new Finder window or creates a new document?" },
            { "term": "Command-O", "explanation": "Open.", "question": "What does Command-O do in macOS?" },
            { "term": "Command-P", "explanation": "Print.", "question": "Which shortcut prints the current document or page?" },
            { "term": "Command-Q", "explanation": "Quit an app.", "question": "What shortcut quits the active application?" },
            { "term": "Command-R", "explanation": "Reload page or Rotate image.", "question": "What does Command-R do in macOS?" },
            { "term": "Command-S", "explanation": "Save.", "question": "How do you save a file using a shortcut?" },
            { "term": "Command-T", "explanation": "Open a new tab.", "question": "Which shortcut opens a new tab in Finder or browsers?" },
            { "term": "Command-Y", "explanation": "Quick Look.", "question": "What is the shortcut for previewing a file with Quick Look?" },
            { "term": "Command-V", "explanation": "Paste.", "question": "What shortcut pastes copied or cut content?" },
            { "term": "Command-W", "explanation": "Close Window.", "question": "Which shortcut closes the current window?" },
            { "term": "Command-X", "explanation": "Cut.", "question": "What shortcut cuts the selected content?" },
            { "term": "Shift-Command-Q", "explanation": "Log out of macOS user account.", "question": "How do you log out of your macOS user account using a shortcut?" },
            { "term": "Shift-Command-C", "explanation": "Open the Computer window.", "question": "Which shortcut opens the Computer window in Finder?" },
            { "term": "Shift-Command-D", "explanation": "Open the desktop folder.", "question": "What shortcut opens the desktop folder in Finder?" },
            { "term": "Shift-Command-F", "explanation": "Open the Recents window.", "question": "Which shortcut opens the Recents window in Finder?" },
            { "term": "Shift-Command-G", "explanation": "Open a Go to Folder window.", "question": "How do you open a Go to Folder window using a shortcut?" },
            { "term": "Shift-Command-H", "explanation": "Open the Home folder.", "question": "Which shortcut opens the Home folder in Finder?" },
            { "term": "Option-Shift-Command-Delete", "explanation": "Empty the Trash without confirmation.", "question": "What shortcut empties the Trash without confirmation in macOS?" }
        ],
    },
    {
        topicName: "Shell/Bash/Kernel",
        entries: [
            { "term": "clear", "explanation": "Clears the terminal screen.", "question": "What command clears the terminal screen?" },
            { "term": "install", "explanation": "Installs software or packages.", "question": "Which command is used to install software or packages?" },
            { "term": "sudo", "explanation": "Executes tasks with superuser privileges.", "question": "What command is used to execute tasks with superuser privileges?" },
            { "term": "sudo lsof -i :portnr", "explanation": "Checks what process is running on a specific port.", "question": "How do you check what process is running on a specific port?" },
            { "term": "kill -9 PID", "explanation": "Stops a process running on a specific port.", "question": "How do you stop a process running on a specific port?" },
            { "term": "kill <PID>", "explanation": "Terminates a process using its process ID.", "question": "What command terminates a process using its process ID?" },
            { "term": "ps aux", "explanation": "Lists all running processes on the system.", "question": "Which command lists all running processes on the system?" },
            { "term": "uname -a", "explanation": "Displays detailed system information, including the kernel version.", "question": "How can you view detailed system information, including the kernel version?" },
            { "term": "dmesg", "explanation": "Displays kernel-related messages.", "question": "Which command displays kernel-related messages?" },
            { "term": "df -h", "explanation": "Shows the disk usage of your system in a human-readable format.", "question": "How can you view the disk usage of your system in a human-readable format?" },
            { "term": "free -h", "explanation": "Displays memory usage in a human-readable format.", "question": "Which command displays memory usage in a human-readable format?" },
            { "term": "top", "explanation": "Monitors system processes and resource usage interactively.", "question": "How can you monitor system processes and resource usage interactively?" },
            { "term": "vm_start", "explanation": "Provides information about memory usage on your system.", "question": "What command provides information about memory usage on your system?" },
            { "term": "ls", "explanation": "Lists files in the current directory.", "question": "How do you list files in the current directory?" },
            { "term": "cd <directory>", "explanation": "Navigates to a different directory.", "question": "What command allows you to navigate to a different directory?" },
            { "term": "pwd", "explanation": "Displays the full path of the current working directory.", "question": "How can you view the full path of the current working directory?" },
            { "term": "mkdir", "explanation": "Creates a new directory.", "question": "Which command creates a new directory?" },
            { "term": "rm", "explanation": "Deletes files or directories.", "question": "What command is used to delete files or directories?" },
            { "term": "cp", "explanation": "Copies files or directories to a specified location.", "question": "Which command copies files or directories to a specified location?" },
            { "term": "mv", "explanation": "Moves or renames a file or directory.", "question": "What command is used to move or rename a file or directory?" },
            { "term": "touch", "explanation": "Creates an empty file in the current directory.", "question": "How do you create an empty file in the current directory?" },
            { "term": "open", "explanation": "Opens a file or application from the terminal.", "question": "What command opens a file or application from the terminal?" },
            { "term": "chmod <permissions> <file>", "explanation": "Modifies the permissions of a file.", "question": "Which command modifies the permissions of a file?" },
            { "term": "chown", "explanation": "Changes the ownership of a file or directory.", "question": "How do you change the ownership of a file or directory?" },
            { "term": "defaults", "explanation": "Accesses or modifies user defaults.", "question": "Which command is used to access or modify user defaults?" },
            { "term": "ping <hostname or IP>", "explanation": "Tests network connectivity to a specific host.", "question": "What command tests network connectivity to a specific host?" },
            { "term": "curl -O <url>", "explanation": "Downloads a file from a URL using curl.", "question": "How do you download a file from a URL using curl?" },
            { "term": "curl -I <url>", "explanation": "Retrieves only the HTTP headers of a URL using curl.", "question": "What curl command retrieves only the HTTP headers of a URL?" },
            { "term": "wget <url>", "explanation": "Downloads files from the internet to your system.", "question": "Which command downloads files from the internet to your system?" },
            { "term": "ifconfig (or ip a)", "explanation": "Displays network interface configurations.", "question": "What command displays network interface configurations?" },
            { "term": "ssh user@<hostname>", "explanation": "Starts a remote shell session with another host.", "question": "Which command starts a remote shell session with another host?" },
            { "term": "netstat -tuln", "explanation": "Lists active network connections.", "question": "What command lists active network connections?" },
            { "term": "traceroute <hostname>", "explanation": "Traces the route packets take to a host.", "question": "How can you trace the route packets take to a host?" },
            { "term": "nslookup <hostname>", "explanation": "Performs a DNS lookup for a given hostname.", "question": "What command performs a DNS lookup for a given hostname?" },
            { "term": "ss -t", "explanation": "Displays active TCP connections on your system.", "question": "How do you display active TCP connections on your system?" },
            { "term": "echo -n password | base64", "explanation": "Encodes a string using Base64.", "question": "Which command encodes a string using Base64?" },
            { "term": "base64 -D", "explanation": "Decodes a Base64-encoded string.", "question": "What command decodes a Base64-encoded string?" }
        ],
    },
    {
        topicName: "Linux Commands",
        entries: [
            // repeated commands of shell are removed from the linux collection.
            { "term": "mkdir <directory-name>", "explanation": "Create a new directory.", "question": "How do you create a new directory?" },
            { "term": "rm <file-name>", "explanation": "Remove a file.", "question": "What command is used to delete a file?" },
            { "term": "rm -r <directory-name>", "explanation": "Remove a directory recursively.", "question": "Which command removes a directory and its contents?" },
            { "term": "cp <source> <destination>", "explanation": "Copy a file.", "question": "How do you copy a file to another location?" },
            { "term": "mv <source> <destination>", "explanation": "Move or rename a file or directory.", "question": "What command moves or renames a file or directory?" },
            { "term": "find <path> -name <name>", "explanation": "Search for a file or directory.", "question": "How do you locate a file or directory by name?" },
            { "term": "cat <file-name>", "explanation": "Display file content.", "question": "Which command outputs the contents of a file?" },
            { "term": "less <file-name>", "explanation": "Display file content with paging.", "question": "What command shows file content one page at a time?" },
            { "term": "touch <file-name>", "explanation": "Create an empty file.", "question": "How do you create an empty file in the current directory?" },
            { "term": "ps", "explanation": "Display running processes.", "question": "Which command lists active processes?" },
            { "term": "grep '<pattern>' <file>", "explanation": "Search for a string in files.", "question": "How do you search for a specific string within a file?" },
            { "term": "ifconfig (deprecated, use ip a)", "explanation": "Show network configuration.", "question": "What command displays network configurations?" },
            { "term": "route -n", "explanation": "Show routing table.", "question": "Which command shows the routing table for your network?" },
            { "term": "ping <host-name>", "explanation": "Ping a host.", "question": "How do you test network connectivity to a specific host?" },
            { "term": "wget <URL>", "explanation": "Download files from a URL.", "question": "Which command downloads files from the internet?" },
            { "term": "curl <URL>", "explanation": "Transfer data from or to a URL.", "question": "How do you transfer data from or to a URL using curl?" },
            { "term": "sudo su", "explanation": "Switch to superuser mode.", "question": "What command grants superuser privileges?" },
            { "term": "chown <owner>:<group> <file>", "explanation": "Change file ownership.", "question": "How do you change the owner and group of a file?" },
            { "term": "gzip <file>", "explanation": "Compress a file with gzip.", "question": "What command compresses a file using gzip?" },
            { "term": "tar -xvzf <file.tar.gz>", "explanation": "Extract a tarball (tar.gz).", "question": "How do you extract a tar.gz file?" },
            { "term": "tar -cvzf <file.tar.gz> <directory>", "explanation": "Create a tarball (tar.gz).", "question": "What command creates a compressed tar.gz file?" },
            { "term": "uptime", "explanation": "Check system uptime.", "question": "How do you check the system's uptime?" },
            { "term": "reboot", "explanation": "Reboot the system.", "question": "Which command restarts the system?" },
            { "term": "shutdown now", "explanation": "Shutdown the system.", "question": "What command shuts down the system immediately?" }
        ],
    },
    {
        topicName: "PowerShell",
        entries: [
            { "term": "Get-ChildItem", "explanation": "List files and directories in the current location.", "question": "What command lists files and directories in the current location?" },
            { "term": "Copy-Item", "explanation": "Copy files or directories.", "question": "Which command copies files or directories in PowerShell?" },
            { "term": "Move-Item", "explanation": "Move or rename files or directories.", "question": "What command moves or renames files or directories in PowerShell?" },
            { "term": "Remove-Item", "explanation": "Delete files or directories.", "question": "How do you delete files or directories using PowerShell?" },
            { "term": "Get-Process", "explanation": "List running processes.", "question": "Which command lists all running processes in PowerShell?" },
            { "term": "Get-Service", "explanation": "List installed services.", "question": "What command lists all installed services in PowerShell?" },
            { "term": "Get-WmiObject", "explanation": "Retrieve system information using Windows Management Instrumentation (WMI).", "question": "How can you retrieve system information using WMI in PowerShell?" },
            { "term": "Get-LocalUser", "explanation": "List local users.", "question": "What command lists all local users in PowerShell?" },
            { "term": "New-LocalUser", "explanation": "Create a new local user.", "question": "How do you create a new local user in PowerShell?" },
            { "term": "Add-LocalGroupMember", "explanation": "Add a user to a local group.", "question": "What command adds a user to a local group in PowerShell?" },
            { "term": "Test-Connection", "explanation": "Ping a remote host to test network connectivity.", "question": "Which command pings a remote host in PowerShell?" },
            { "term": "Test-NetConnection", "explanation": "Test network connectivity and troubleshoot network issues.", "question": "How can you test network connectivity and troubleshoot issues using PowerShell?" },
            { "term": "Get-ItemProperty", "explanation": "Get values from the Windows Registry.", "question": "Which command retrieves values from the Windows Registry in PowerShell?" },
            { "term": "Set-ItemProperty", "explanation": "Set values in the Windows Registry.", "question": "How do you set values in the Windows Registry using PowerShell?" },
            { "term": "Get-Content", "explanation": "Read the content of files.", "question": "What command reads the content of a file in PowerShell?" },
            { "term": "Set-Content", "explanation": "Write content to files.", "question": "How do you write content to files in PowerShell?" },
            { "term": "Select-String", "explanation": "Search for text patterns in files.", "question": "Which command searches for text patterns in files in PowerShell?" },
            { "term": "Get-Package", "explanation": "List installed software packages.", "question": "How do you list installed software packages in PowerShell?" },
            { "term": "Install-Package", "explanation": "Install software packages.", "question": "What command installs software packages in PowerShell?" },
            { "term": "Uninstall-Package", "explanation": "Uninstall software packages.", "question": "Which command uninstalls software packages in PowerShell?" },
            { "term": "Get-Acl", "explanation": "Retrieve access control lists (ACLs) for files and directories.", "question": "How can you retrieve ACLs for files or directories in PowerShell?" },
            { "term": "Set-Acl", "explanation": "Set ACLs to manage permissions.", "question": "What command sets ACLs for files or directories in PowerShell?" },
            { "term": "Enter-PSSession", "explanation": "Start an interactive session on a remote computer.", "question": "How do you start an interactive session on a remote computer using PowerShell?" },
            { "term": "Invoke-Command", "explanation": "Run commands on remote computers.", "question": "Which command runs commands on remote computers in PowerShell?" },
            { "term": "Copy-Item -ToSession", "explanation": "Copy files to a remote session.", "question": "How do you copy files to a remote session in PowerShell?" },
            { "term": "Get-ChildItem Env", "explanation": "List environment variables.", "question": "Which command lists environment variables in PowerShell?" },
            { "term": "Set-Item Env", "explanation": "Set or modify environment variables.", "question": "What command sets or modifies environment variables in PowerShell?" }
        ],
    },
    {
        topicName: "Azure PowerShell",
        entries: [
            // General
            { "term": "pwsh", "explanation": "Start PowerShell.", "question": "How do you start PowerShell?" },
            { "term": "nano MyScript.ps1", "explanation": "Create a PowerShell script.", "question": "How can you create a PowerShell script?" },
            { "term": "date", "explanation": "Get short date.", "question": "Which command shows the short date in PowerShell?" },
            { "term": "az version", "explanation": "Get AZ CLI version.", "question": "How do you check the version of Azure CLI?" },
            { "term": "az upgrade", "explanation": "Upgrade AZ CLI.", "question": "Which command upgrades Azure CLI?" },
            { "term": "az interactive", "explanation": "AZ CLI interactive mode (command declarations).", "question": "How do you start interactive mode in Azure CLI?" },
            { "term": "exit", "explanation": "Exit the interactive mode.", "question": "What command exits Azure CLI interactive mode?" },
            { "term": "az vm create", "explanation": "Create a virtual machine in Azure CLI.", "question": "How can you create a virtual machine using Azure CLI?" },
            { "term": "Login-AzAccount", "explanation": "Log in to your Azure account.", "question": "How do you log in to Azure using PowerShell?" },
            { "term": "Get-AzResourceGroup", "explanation": "List resource groups.", "question": "What command lists resource groups in Azure?" },
            { "term": "New-AzResourceGroup", "explanation": "Create a new resource group.", "question": "How do you create a new resource group in Azure?" },
            { "term": "Get-AzResource", "explanation": "List resources in a resource group or subscription.", "question": "Which command lists resources in a resource group in Azure?" },
            { "term": "New-AzResource", "explanation": "Create a new resource in a resource group.", "question": "How do you create a new resource in Azure?" },
            { "term": "Remove-AzResource", "explanation": "Delete a resource.", "question": "What command deletes a resource in Azure?" },
            { "term": "New-AzVM", "explanation": "Create a new virtual machine.", "question": "How do you create a virtual machine in Azure using PowerShell?" },
            { "term": "Start-AzVM", "explanation": "Start a virtual machine.", "question": "What command starts a virtual machine in Azure?" },
            { "term": "Stop-AzVM", "explanation": "Stop a virtual machine.", "question": "How do you stop a virtual machine in Azure using PowerShell?" },
            { "term": "Restart-AzVM", "explanation": "Restart a virtual machine.", "question": "Which command restarts a virtual machine in Azure?" },
            { "term": "Update-AzVM", "explanation": "Update the configuration of a virtual machine.", "question": "What command updates the configuration of a virtual machine in Azure?" },
            { "term": "New-AzStorageAccount", "explanation": "Create a new storage account.", "question": "How can you create a storage account in Azure?" },
            { "term": "Get-AzStorageAccount", "explanation": "List storage accounts.", "question": "What command lists storage accounts in Azure?" },
            { "term": "New-AzStorageContainer", "explanation": "Create a new storage container.", "question": "Which command creates a storage container in Azure?" },
            { "term": "Get-AzStorageContainer", "explanation": "List storage containers.", "question": "How do you list storage containers in Azure?" },
            { "term": "Set-AzStorageBlobContent", "explanation": "Upload a file to a storage container.", "question": "What command uploads a file to a storage container in Azure?" },
            { "term": "New-AzWebApp", "explanation": "Create a new Azure Web App.", "question": "How do you create a new Azure Web App?" },
            { "term": "Get-AzWebApp", "explanation": "List Azure Web Apps.", "question": "Which command lists Azure Web Apps?" },
            { "term": "Publish-AzWebApp", "explanation": "Deploy a local app to an Azure Web App.", "question": "How can you deploy a local app to an Azure Web App?" },
            { "term": "New-AzSqlServer", "explanation": "Create a new Azure SQL Server.", "question": "How do you create a new Azure SQL Server?" },
            { "term": "New-AzSqlDatabase", "explanation": "Create a new Azure SQL Database.", "question": "What command creates a new Azure SQL Database?" },
            { "term": "Get-AzSqlDatabase", "explanation": "List Azure SQL Databases.", "question": "How do you list Azure SQL Databases?" },
            { "term": "New-AzVirtualNetwork", "explanation": "Create a new virtual network.", "question": "How can you create a virtual network in Azure?" },
            { "term": "New-AzVirtualNetworkSubnetConfig", "explanation": "Create a subnet configuration.", "question": "Which command creates a subnet configuration in Azure?" },
            { "term": "Get-AzVirtualNetwork", "explanation": "List virtual networks.", "question": "How do you list virtual networks in Azure?" },
            { "term": "New-AzKeyVault", "explanation": "Create a new Azure Key Vault.", "question": "How can you create a Key Vault in Azure?" },
            { "term": "Get-AzKeyVault", "explanation": "List Azure Key Vaults.", "question": "Which command lists Azure Key Vaults?" },
            { "term": "Set-AzKeyVaultSecret", "explanation": "Set a secret in an Azure Key Vault.", "question": "How do you set a secret in Azure Key Vault?" },
            { "term": "New-AzADServicePrincipal", "explanation": "Create a new Azure Active Directory (AD) service principal.", "question": "What command creates a new Azure AD service principal?" },
            { "term": "Get-AzADServicePrincipal", "explanation": "List Azure AD service principals.", "question": "How do you list Azure AD service principals?" },
            { "term": "New-AzResourceLock", "explanation": "Create a new resource lock.", "question": "Which command creates a new resource lock in Azure?" },
            { "term": "Get-AzResourceLock", "explanation": "List resource locks.", "question": "How do you list resource locks in Azure?" },
            { "term": "Remove-AzResourceLock", "explanation": "Remove a resource lock.", "question": "What command removes a resource lock in Azure?" }
        ],
    },
    {
        topicName: "tmux Commands",
        entries: [
            { "term": "tmux", "explanation": "Start a new tmux session.", "question": "How do you start a new tmux session?" },
            { "term": "tmux new -s <session-name>", "explanation": "Start a new tmux session with a specific name.", "question": "How can you start a new tmux session with a custom name?" },
            { "term": "tmux ls", "explanation": "List all tmux sessions.", "question": "What command lists all active tmux sessions?" },
            { "term": "tmux attach -t <session-name>", "explanation": "Attach to a tmux session.", "question": "How do you attach to an existing tmux session?" },
            { "term": "Ctrl-b d", "explanation": "Detach from the current tmux session.", "question": "What keyboard shortcut detaches from the current tmux session?" },
            { "term": "tmux kill-session -t <session-name>", "explanation": "Kill a tmux session.", "question": "Which command kills a specific tmux session?" },
            { "term": "Ctrl-b $", "explanation": "Rename the current tmux session.", "question": "How do you rename the current tmux session?" },
            { "term": "Ctrl-b c", "explanation": "Create a new window in tmux.", "question": "What shortcut creates a new window in tmux?" },
            { "term": "Ctrl-b n", "explanation": "Switch to the next window.", "question": "How can you switch to the next window in tmux?" },
            { "term": "Ctrl-b p", "explanation": "Switch to the previous window.", "question": "Which shortcut switches to the previous window in tmux?" },
            { "term": "Ctrl-b <number>", "explanation": "Switch to a specific window by number.", "question": "How do you switch to a specific tmux window using its number?" },
            { "term": "Ctrl-b ,", "explanation": "Rename the current window.", "question": "What shortcut renames the current tmux window?" },
            { "term": "Ctrl-b %", "explanation": "Split the current pane horizontally.", "question": "How can you split the current tmux pane horizontally?" },
            { "term": "Ctrl-b \"", "explanation": "Split the current pane vertically.", "question": "What shortcut splits the current tmux pane vertically?" },
            { "term": "Ctrl-b o", "explanation": "Switch to the next pane.", "question": "How do you switch to the next pane in tmux?" },
            { "term": "Ctrl-b <arrow-keys>", "explanation": "Resize the current pane.", "question": "Which shortcut resizes the current tmux pane?" },
            { "term": "Ctrl-b x", "explanation": "Close the current pane.", "question": "How can you close the current tmux pane?" },
            { "term": "Ctrl-b : setw synchronize-panes on", "explanation": "Synchronize panes in tmux.", "question": "What command synchronizes all panes in tmux?" },
            { "term": "Ctrl-b [", "explanation": "Scroll up in the current pane.", "question": "How do you scroll up in a tmux pane?" },
            { "term": "q", "explanation": "Exit scroll mode in tmux.", "question": "Which key exits scroll mode in tmux?" },
            { "term": "tmux save-buffer <file-name>", "explanation": "Save a tmux session to a file.", "question": "How can you save a tmux session buffer to a file?" },
            { "term": "tmux source-file <file-name>", "explanation": "Restore a tmux session from a file.", "question": "What command restores a tmux session from a file?" },
            { "term": "tmux kill-server", "explanation": "Kill all tmux sessions.", "question": "How do you kill all tmux sessions at once?" }
        ],
    },
    {
        topicName: "Deno",
        entries: [
            { "term": "deno run <file>", "explanation": "Executes the specified script file (TypeScript or JavaScript).", "question": "What command executes a Deno script file?" },
            { "term": "deno test [options]", "explanation": "Runs test files with the .test.ts or .test.js extensions.", "question": "How do you run tests in Deno?" },
            { "term": "deno lint [files...]", "explanation": "Lints the specified files to enforce code quality and style.", "question": "What command lints files in Deno?" },
            { "term": "deno fmt [files...]", "explanation": "Formats files according to Deno's style guide.", "question": "How do you format files in Deno?" },
            { "term": "deno compile <file>", "explanation": "Compiles a script into a standalone executable.", "question": "What command compiles a Deno script into an executable?" },
            { "term": "deno run --allow-net <file>", "explanation": "Allows network access for the script.", "question": "What command allows network access for a Deno script?" },
            { "term": "deno run --allow-read <file>", "explanation": "Allows read access to the file system.", "question": "What command allows file system read access in Deno?" },
            { "term": "deno run --allow-write <file>", "explanation": "Allows write access to the file system.", "question": "What command allows file system write access in Deno?" },
            { "term": "deno run --allow-env <file>", "explanation": "Allows access to environment variables.", "question": "How do you allow environment variable access in Deno?" },
            { "term": "deno cache <file>", "explanation": "Downloads and caches all dependencies locally.", "question": "What command caches dependencies in Deno?" },
            { "term": "deno info [file]", "explanation": "Displays information about a script or the Deno cache.", "question": "How do you get information about a Deno script or cache?" },
            { "term": "deno install [options] <file>", "explanation": "Installs a script globally as an executable.", "question": "How do you install a Deno script globally?" },
            { "term": "deno doc [module]", "explanation": "Generates documentation for a module.", "question": "What command generates documentation for a Deno module?" },
            { "term": "deno upgrade", "explanation": "Upgrades Deno to the latest version.", "question": "What command upgrades Deno to the latest version?" },
            { "term": "deno help [command]", "explanation": "Displays help information for a specific command.", "question": "How do you get help for a specific Deno command?" }
        ],
    },
]

// aditional topics: Random like gigo..., Linux keys, git concepts,